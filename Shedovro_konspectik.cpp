#include <iostream>

int main()
{
   
    std::cout << "Hello World!\n";
}

/*
Под паттерном проект. будем пон. опис. взаим. объектов и классов,
адапт. для реш. общей задачи проект. в конкрет. контексте
Мдиомы это паттерны специализ. для конкрет. языка прог.
Составляющие паттерна:
    1. Имя
    2. Задача
    3. Решения
    4. Результаты
Паттерн - общ. опис. хорошего способа решения задачи
Антипаттерн - часто повтор. плохое решение, котор. не рекоменд. к исп.
Цель паттерна - распознать возможность применю хорошго решения проблемы
Цель антипаттерна - обнаруж. плохую ситуацию, предлож. подход к её устранению
Базовые принципы для разработки дизайна сист.:
    Всегда форматировать простой дизайн: из жвух предлож решений, как правило, лучшим является то, что проще\
    Слабая зависимость: дизайн модуля должен быть таким, что бы случае его модификации завис фрагменты сист. не требовали
    или почти не требовали изменений
Признаки плохогог дизайна кода:
    Дубляж кода
    Большие методы
    Большие классы
    Зависть
    Нарушение приватность
    Нарушение завещание
    Ленивый класс
    Чрезмерная сложность
    Чрезмерно длянные идентификаторы
Принципы выбора паттернов проектирования:
    Решайте проблему, а не раздувайте функционал
    Первична задача, а не паттерн
    Не вводите сложн. паттерн, где можно обойтись простыми
    Абстрагируйтесь от деталей реализ. до того как начнёте писать код
Паттерны по назнач.:
    Порождающие паттерны ()
    Структурные паттерны ()
    Поведенчесие паттерны ()


    







*/